# -*- coding: utf-8 -*-
"""Clustering_Time.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oiYFb1Y9pv2jwO7Lli12n6ii9SH__ohK

**bold text**#Imports
"""

import numpy as np
import pandas as pd
import datetime as DT
from sklearn.cluster import KMeans
from PIL import Image, ImageDraw, ImageFont
import matplotlib.pyplot as plt



"""***italicized text***#Access to GoogleDrive"""


data = pd.read_csv('during.csv').values

"""#Preprocessing"""


### Number of sensors
numPositions = 6  # or sensors 6 level
time_step = 60 # min
positions = list()

num = np.size(data,axis=0)
numMins = (int)(np.ceil(24*60 / time_step))

data_process = np.zeros((numMins , numPositions))

t2 = DT.datetime(1900,1,1)
for i in range(num):
  t1 = DT.datetime.strptime(data[i,1], '%H:%M:%S')
  min = (t1-t2).total_seconds() / 60.0

  min_idx = (int)(min // time_step)

  pos = data[i , 4]
  try:
    pos_idx = positions.index(pos)
  except:
    positions.append(pos)
  finally:
    pos_idx = positions.index(pos)

  count = data[i , 2]
  data_process[min_idx , pos_idx] += count

"""#Clustring"""

numCluster = 4
kmeans = KMeans(n_clusters = numCluster , random_state = 0).fit(data_process)
labels = kmeans.labels_

image = Image.open('background.jpg')
draw = ImageDraw.Draw(image)
color = 'rgb(0, 0, 0)'
font = ImageFont.truetype( font= 'Roboto-Light.ttf',size=45)

(s1 , s2) = image.size
b = np.ceil(s1 / numCluster * 2)
for i in range(len(labels)):
  minutes = i * time_step
  text = '{:02d}:{:02d}'.format(*divmod(minutes, 60))
  r = np.random.rand((2))
  r = np.random.randn((2))/5+0.5
  j = labels[i] % (numCluster/2)
  x = j * b + r[0] * b
  if labels[i] < numCluster/2:
    y = (s2 / 2) * r[1]
  else:
    y = (s2 / 2) + (s2/2)* r[1]

  x = (int)(x)
  y = (int)(y)

  draw.text((x, y), text, fill=color, font=font)

for i in range(s1):
  draw.text((i, s2/2), '_', fill=color, font=font)
for i in range((int)(numCluster/2)):
  for j in range(s2):
    draw.text((i*b, j), '|', fill=color, font=font)

plt.imshow(np.asarray(image))
image.save('res.png')

for c in range(numCluster):
  print('Group '+str(c+1)+':')
  for i in range(len(labels)):
    if labels[i] != c:
      continue
    
    minutes = i * time_step
    text = '{:02d}:{:02d}'.format(*divmod(minutes, 60))
    print('\t'+text)
plt.title("Before Intervention month")
###################image plot(Heat MAp) #######################################
#plt.figure(2)
#plt.imshow(data_process)    
#plt.colorbar()
#plt.show()    
##########################Plot accumolation data points and levels #############
#plt.figure(12)
#
#plt.plot(data_process[:,0:6])
#
#plt.show()    







